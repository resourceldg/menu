!function(){"use strict";const e=1609544049245,t=`cache${e}`,s=["client/index.47293e33.js","client/sre.edc45884.js","client/breakpoints.1b1b25bd.js","client/_layout.ea420db3.js","client/index.7cb649bd.js","client/navigation-drawers.44ecbe87.js","client/index.a8575991.js","client/progress-indicators.4d20897b.js","client/index.802c5456.js","client/PropsTable.c0733b1a.js","client/Card.74b86d5f.js","client/index.e7330692.js","client/Code.4523955d.js","client/selection-controls.405f6114.js","client/index.de210a51.js","client/data-tables.b4929710.js","client/index.9c86a623.js","client/text-fields.bdf846e0.js","client/tooltips.cb4aa788.js","client/date-pickers.c926ed75.js","client/index.c3d7374b.js","client/index.1a3f4bbd.js","client/snackbars.cf9017cc.js","client/buttons.f015a0c2.js","client/index.08641c7b.js","client/treeviews.ab0c38f9.js","client/index.9ef65434.js","client/images.3c8727ac.js","client/sliders.3eb563ba.js","client/dialogs.0c056867.js","client/selects.136be5aa.js","client/cards.14919d67.js","client/jump.8e1f1d54.js","client/menus.59bac2cb.js","client/index.2c11ee66.js","client/dark-mode.c807b94b.js","client/typography.d88f4956.js","client/postgresql.f9658fcd.js","client/api.42cab95d.js","client/client.b4bef8b7.js","client/frontend.ed1fb2dd.js","client/tabs.859db81a.js","client/lists.2389b5d4.js","client/color.9671f6dc.js","client/chips.9386857f.js","client/client.7628e46f.js"].concat(["service-worker-index.html","data.json","face.svg","facebook-24px.svg","favicon.png","github.png","global.css","instagram.svg","locura.svg","logo.svg","manifest.json","prism.css","producciones.svg"]),c=new Set(s);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(s))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const s of e)s!==t&&await caches.delete(s);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const s=new URL(t.request.url);s.protocol.startsWith("http")&&(s.hostname===self.location.hostname&&s.port!==self.location.port||(s.host===self.location.host&&c.has(s.pathname)?t.respondWith(caches.match(t.request)):"only-if-cached"!==t.request.cache&&t.respondWith(caches.open(`offline${e}`).then((async e=>{try{const s=await fetch(t.request);return e.put(t.request,s.clone()),s}catch(s){const c=await e.match(t.request);if(c)return c;throw s}})))))}))}();
