(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1610478185291;

	const files = [
		"service-worker-index.html",
		"2x1.svg",
		"appetizer.jpg",
		"bar.jpg",
		"beef.jpg",
		"beer-solid.svg",
		"beer.svg",
		"beer0.jpg",
		"beerrr.jpg",
		"ber12.jpg",
		"beret.jpg",
		"bert.jpg",
		"bowl.jpg",
		"bp.png",
		"burble.svg",
		"burrito.jpg",
		"data.json",
		"disc.jpg",
		"drink.jpg",
		"eggs.jpg",
		"face.svg",
		"facebook-24px.svg",
		"favicon.png",
		"fried.jpg",
		"github.png",
		"global.css",
		"hamburger.jpg",
		"icon.svg",
		"instagram.svg",
		"locura.svg",
		"logo.svg",
		"manifest.json",
		"meat.jpg",
		"prism.css",
		"producciones.svg",
		"share-solid.svg",
		"share.svg",
		"steak.jpg",
		"tavern1.jpg",
		"twitter.svg",
		"wsp.svg",
		"wsp1.svg"
	];

	const shell = [
		"client/client.405f2f7e.js",
		"client/index.718892e6.js",
		"client/MiniHero.36c819f0.js",
		"client/Share.3139f869.js",
		"client/bebidas.ce0e2aae.js",
		"client/platos.98d20112.js",
		"client/press.fa7ddae9.js",
		"client/promo.2ce07e5d.js",
		"client/shop.52d7f6cc.js",
		"client/sapper-dev-client.4cd68457.js",
		"client/client.f50466f7.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener("install", event => {
	  event.waitUntil(
	    caches
	      .open(ASSETS)
	      .then(cache => cache.addAll(to_cache))
	      .then(() => {
	        self.skipWaiting();
	      })
	  );
	});

	self.addEventListener("activate", event => {
	  event.waitUntil(
	    caches.keys().then(async keys => {
	      // delete old caches
	      for (const key of keys) {
	        if (key !== ASSETS) await caches.delete(key);
	      }

	      self.clients.claim();
	    })
	  );
	});

	self.addEventListener("fetch", event => {
	  if (event.request.method !== "GET" || event.request.headers.has("range"))
	    return;

	  const url = new URL(event.request.url);

	  // don't try to handle e.g. data: URIs
	  if (!url.protocol.startsWith("http")) return;

	  // ignore dev server requests
	  if (
	    url.hostname === self.location.hostname &&
	    url.port !== self.location.port
	  )
	    return;

	  // always serve static files and bundler-generated assets from cache
	  if (url.host === self.location.host && cached.has(url.pathname)) {
	    event.respondWith(caches.match(event.request));
	    return;
	  }

	  // for pages, you might want to serve a shell `service-worker-index.html` file,
	  // which Sapper has generated for you. It's not right for every
	  // app, but if it's right for yours then uncomment this section
	  /*
	  if (
	    url.origin === self.origin &&
	    routes.find(route => route.pattern.test(url.pathname))
	  ) {
	    event.respondWith(caches.match("/service-worker-index.html"));
	    return;
	  }
	  */

	  if (event.request.cache === "only-if-cached") return;

	  // for everything else, try the network first, falling back to
	  // cache if the user is offline. (If the pages never change, you
	  // might prefer a cache-first approach to a network-first one.)
	  event.respondWith(
	    caches.open(`offline${timestamp}`).then(async cache => {
	      try {
	        const response = await fetch(event.request);
	        cache.put(event.request, response.clone());
	        return response;
	      } catch (err) {
	        const response = await cache.match(event.request);
	        if (response) return response;

	        throw err;
	      }
	    })
	  );
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
